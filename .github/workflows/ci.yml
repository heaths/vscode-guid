name: ci

on:
  pull_request:
    branches:
    - master
    - develop

  push:
    branches:
    - master

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        node-version:
        - '10.x'
        os:
        - macos-latest
        - ubuntu-latest
        - windows-latest
        vscode-channel:
        - stable
        - insiders

    outputs:
      package_name: ${{ steps.package.outputs.package_name }}
      build_version: ${{ steps.package.outputs.build_version }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Node ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: npm install

    - name: Compile
      run: npm run compile set-version

    - name: Test (Linux)
      if: runner.os == 'Linux'
      run: xvfb-run -a npm test
      env:
        CODE_VERSION: ${{ matrix.vscode-channel }}
        TEST_RESULTS_PATH: ${{ github.workspace }}/.vscode-test/test-results.xml

    - name: Test
      if: runner.os != 'Linux'
      run: npm test
      env:
        CODE_VERSION: ${{ matrix.vscode-channel }}
        TEST_RESULTS_PATH: ${{ github.workspace }}/.vscode-test/test-results.xml

    - name: Publish test results
      uses: actions/upload-artifact@v1
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.vscode-channel }}
        path: .vscode-test/test-results.xml

    - id: package
      name: Package
      run: |
        npm install -g vsce
        vsce package -o "${{ runner.temp }}/vscode-guid-${{ env.BUILD_VERSION }}.vsix"

        echo "::set-output name=package_name::vscode-guid-${{ env.BUILD_VERSION }}.vsix"
        echo "::set-output name=build_version::${{ env.BUILD_VERSION }}"
      if: runner.os == 'Linux' && matrix.vscode-channel == 'stable'

    - name: Upload package
      uses: actions/upload-artifact@v2
      if: runner.os == 'Linux' && matrix.vscode-channel == 'stable'
      with:
        name: artifacts
        path: ${{ runner.temp }}/vscode-guid-${{ env.BUILD_VERSION }}.vsix

  check:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Check
      run: echo "All required checks passed"

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Setup Node
      uses: actions/setup-node@v1
      with:
        node-version: '8.x'

    - name: Download package
      uses: actions/download-artifact@v2
      with:
        name: artifacts
        path: ${{ runner.temp }}/

    - id: create
      name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build.outputs.build_version }}
        release_name: v${{ needs.build.outputs.build_version }}

    - name: Upload package to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create.outputs.upload_url }}
        asset_name: ${{ needs.build.outputs.package_name }}
        asset_path: ${{ runner.temp }}/${{ needs.build.outputs.package_name }}
        asset_content_type: application/zip

    - name: Publish package
      run: |
        npm install -g vsce
        vsce publish -p "$VSCE_TOKEN" --packagePath "${{ runner.temp }}/${{ needs.build.outputs.package_name }}"
      env:
        VSCE_TOKEN: ${{ secrets.VSCE_TOKEN }}
